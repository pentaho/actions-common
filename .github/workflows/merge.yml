name: Pentaho merge workflow
on:
  workflow_call:
    inputs:
      modules_to_build:
        type: string
        required: false
        description: >
          The modules to build when running from the root of the project. Defaults to everything ('.').
          Using this option builds only the modules you specify, regardless of whether those modules have changes.
      version:
        type: string
        required: false
        description: "Version to be built"
      base_version:
        type: string
        required: true
        description: "Base version to be taken in consideration for dependencies"
      base_build_name:
        type: string
        required: false
        default: "pdia-master"
        description: "Base build name to be taken in consideration to get the latest version when base_version is not provided"
      slack_channels:
        type: string
        required: false
        description: "Slack channel(s) to send notifications to."
      sonar_project_key:
        type: string
        required: false
        description: "Sonar's project identifier key"
      blackduck_project_key:
        type: string
        required: false
        default: "Pentaho"  # it's either "Pentaho" or "Pentaho SHIMS" on Orion
        description: "Project key for Blackduck"
      blackduck_server_url:
        type: string
        required: false
        default: https://orion.orl.eng.hitachivantara.com
        description: "Server URL for Blackduck"
      blackduck_additional_args:
        type: string
        required: false
        default: ""
        description: "Extra additional args for blackduck scan"
      additional_mvn_directives:
        type: string
        required: false
        default: ""
        description: "Extra additional directives for the Maven command"
      run_snapshot:
        required: false
        type: boolean
        default: true
        description: 'should the snapshot build run'
      run_versioning:
        type: boolean
        required: false
        default: true
        description: 'should the versioning run on the RC build'
      run_release_candidate:
        type: boolean
        required: false
        default: false
        description: 'should the RC build'
      add_github_run_number:
        type: boolean
        required: false
        default: true
        description: 'should the github run number be added to the version'
      use_semver_release_candidate:
        type: boolean
        required: false
        default: false
        description: 'should the version be a semver'
      ms_teams_webhook_secret_name:
        type: string
        required: false
        default: ""
        description: "The MS Teams webhook"
      container_image:
        type: string
        required: false
        description: 'Image to be used'
      resolve_repo:
        type: string
        required: false
        description: "Custom Maven repo for dependency resolution"
    outputs:
      current-version:
        value: ${{ jobs.release-candidate.outputs.current-version }}
        description: "The current version being built"

env:
  VERSION: "${{ inputs.version }}"
  BASE_VERSION: "${{ inputs.base_version }}"
  SLACK_CHANNEL: "${{ inputs.slack_channels }}"

  SONAR_PROJECT_KEY: ${{ inputs.sonar_project_key || github.event.repository.name }}
  SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
  SONAR_LOGIN: ${{secrets.WINGMAN_SONAR_TOKEN}}

  ARTIFACTORY_HOST: https://${{ vars.ARTIFACTORY_HOST }}
  ARTIFACTORY_BASE_URL: ${ARTIFACTORY_HOST}/artifactory

  RESOLVE_REPO_MIRROR: ${{ format('{0}/{1}', vars.ARTIFACTORY_BASE_URL, inputs.resolve_repo || 'pnt-mvn') }}

  NEXUS_DEPLOY_USER: ${{ secrets.PENTAHO_CICD_ONE_USER }}
  NEXUS_DEPLOY_PASSWORD: ${{ secrets.PENTAHO_CICD_ONE_KEY }}

  PUBLIC_RELEASE_REPO: pntpub-maven-dev
  PUBLIC_RELEASE_REPO_URL: ${ARTIFACTORY_BASE_URL}/${PUBLIC_RELEASE_REPO}
  PRIVATE_RELEASE_REPO: pntprv-maven-dev
  PRIVATE_RELEASE_REPO_URL: ${ARTIFACTORY_BASE_URL}/${PRIVATE_RELEASE_REPO}

  PUBLIC_SNAPSHOT_REPO: pntpub-maven-snapshot
  PUBLIC_SNAPSHOT_REPO_URL: ${ARTIFACTORY_BASE_URL}/${PUBLIC_SNAPSHOT_REPO}
  PRIVATE_SNAPSHOT_REPO: pntprv-maven-snapshot
  PRIVATE_SNAPSHOT_REPO_URL: ${ARTIFACTORY_BASE_URL}/${PRIVATE_SNAPSHOT_REPO}

  DOCKER_PULL_HOST: ${{ vars.ARTIFACTORY_HOST }}/pnt-docker/
  DOCKER_PUBLIC_PUSH_HOST: ${{ vars.ARTIFACTORY_HOST }}/pntpub-docker-dev/
  DOCKER_PRIVATE_PUSH_HOST: ${{ vars.ARTIFACTORY_HOST }}/pntprv-docker-dev/

jobs:

  snapshot:
    if: ${{ inputs.run_snapshot == true }}
    name: Update Snapshots
    runs-on: [ k8s ]
    container:
      image: ${{ inputs.container_image || vars.PDIA_AC_CONTAINER_IMAGE }}
      credentials:
        username: ${{ secrets.PENTAHO_CICD_ONE_USER }}
        password: ${{ secrets.PENTAHO_CICD_ONE_KEY }}
      volumes:
        - /home/runner/caches/pentaho/.m2:/root/.m2

    steps:

      - name: Retrieve settings file
        id: common-maven
        uses: pentaho/actions-common@stable

      - name: Copy settings.xml to .m2 directory
        shell: sh
        run: |
          cp "${{ steps.common-maven.outputs.settings-file-path }}" /root/.m2

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: git config --global --add safe.directory /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}

      - name: Determine which changes occurred
        if: ${{ inputs.modules_to_build == '' }}
        id: change_detection
        uses: hv-actions/change-detection-builder@stable

      - name: Update cmd_type as per the mvn_directives
        if: env.SET_CMD_TYPE == null
        run: |
          if [[ -n "${{ inputs.additional_mvn_directives }}" && "${{ inputs.additional_mvn_directives }}" == *"-DrunITs"* ]]; then
            echo "SET_CMD_TYPE=BUILD,UNIT_TEST,INTEGRATION_TEST" >> $GITHUB_ENV
          else
            echo "SET_CMD_TYPE=BUILD,UNIT_TEST" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Build code, deploy artifacts & Run tests
        id: Build_Unit_Test
        uses: lumada-common-services/gh-composite-actions@stable
        with:
          command: |
            mvn clean deploy -amd -Daudit \
            -pl "${{ inputs.modules_to_build || steps.change_detection.outputs.changed_modules }}" \
             ${{ inputs.additional_mvn_directives }}
        env:
          cmd_type: ${{ env.SET_CMD_TYPE }}
          unit_test_reporter: 'java-junit'
          unit_test_fail_on_error: 'true'
          unit_test_report_path: '**/target/surefire-reports/*.xml'
          int_test_reporter: 'java-junit'
          int_test_fail_on_error: 'true'
          int_test_report_path: '**/target/failsafe-reports/TEST*.xml'

      - name: Sonarqube scan
        id: Sonarqube
        continue-on-error: true
        uses: lumada-common-services/gh-composite-actions@stable
        env:
          sonar_utility: sonar-scanner
          sonar_commands: '("-Dsonar.working.directory=/tmp/.scannerwork -Dsonar.projectKey=${{env.SONAR_PROJECT_KEY}} -Dsonar.host.url=${{env.SONAR_HOST_URL}} -Dsonar.token=${{env.SONAR_LOGIN}}")'

      - name: Report notifications
        if: always()
        uses: lumada-common-services/gh-composite-actions@stable
        env:
          Slack_Token: ${{ secrets.SLACK_TOKEN }}
          Slack_Channel: ${{ env.SLACK_CHANNEL }}
          teams_Webhook_Url: ${{ secrets[inputs.ms_teams_webhook_secret_name] }}
          steps_json: ${{ toJson(steps) }}
          report: true

  release-candidate:
    if: ${{ inputs.run_release_candidate == true }}
    name: Build Release Candidate

    runs-on: [ k8s ]

    env:
      JFROG_CLI_BUILD_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    container:
      image: ${{ inputs.container_image || vars.PDIA_AC_CONTAINER_IMAGE }}
      credentials:
        username: ${{ secrets.PENTAHO_CICD_ONE_USER }}
        password: ${{ secrets.PENTAHO_CICD_ONE_KEY }}
      volumes:
        - /home/runner/caches/pentaho/.m2:/root/.m2
    outputs:
      current-version: ${{ steps.version.outputs.current-version }}

    steps:

      - name: Retrieve settings file
        id: common-maven
        uses: pentaho/actions-common@stable

      - name: Copy settings.xml to .m2 directory
        shell: sh
        run: |
          cp "${{ steps.common-maven.outputs.settings-file-path }}" /root/.m2

      - id: initial-setup
        shell: bash
        run: |
          checkout_depth=0
          
          if [[ "${{ inputs.modules_to_build }}" != "" ]]; then
            checkout_depth=1
          fi
          
          echo "checkout_depth=$checkout_depth" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.HV_ACTIONS_GIT_TOKEN }}
          fetch-depth: ${{ steps.initial-setup.outputs.checkout_depth }}

      - run: git config --global --add safe.directory /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}

      - name: Determine which changes occurred
        if: ${{ inputs.modules_to_build == '' }}
        id: change_detection
        uses: hv-actions/change-detection-builder@stable

      - name: Determine version
        id: version
        shell: bash
        run: |
          version="${{ env.VERSION }}"
          
          if [[ -z "$version" ]]; then
            version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//')
          fi
          
          tag="$version"
          if [[ "${{ inputs.run_versioning }}" == "true" ]]; then
            if [[ "${{ inputs.add_github_run_number }}" == "true" ]]; then
              version="$version-${{ github.run_number }}"
            fi
            tag="$version"
          else
            tag="$version-R"
          fi

          if [[ "${{ inputs.use_semver_release_candidate }}" == "true" ]]; then
            # Fetch all tags first
            git fetch --tags

            # Determine the next release candidate number
            rc_number=1
            latest_rc_tag=$(git tag -l "${version}-rc.*" | sort -V | tail -n 1)

            if [[ -n "$latest_rc_tag" ]]; then
              rc_number=$(( $(echo $latest_rc_tag | sed 's/.*-rc\.//') + 1 ))
            fi

            version="${version}-rc.${rc_number}"
            tag="$version"
          fi
          
          echo "current-tag=$tag" >> $GITHUB_OUTPUT
          echo "current-version=$version" >> $GITHUB_OUTPUT
          echo "original-version=${{ env.VERSION }}" >> $GITHUB_OUTPUT

      - id: post-setup
        shell: bash
        run: |
          branch_name="${{ github.ref_name }}"
          sanitized_branch="${branch_name//\//-}"
          build_name=${{ github.event.repository.name }}-${sanitized_branch}
          build_number="${{ steps.version.outputs.current-version }}"

          echo "build_name=$build_name" >> $GITHUB_OUTPUT
          echo "build_number=$build_number" >> $GITHUB_OUTPUT

      - name: Get latest base version
        id: get-latest-version
        uses: pentaho/actions-common/.github/actions/get-latest-version@PAS
        if: ${{ env.BASE_VERSION == '' }}
        with:
          build_name: ${{ inputs.base_build_name }}
          artifactory_url: ${{ env.ARTIFACTORY_BASE_URL }}
          artifactory_user: ${{ env.NEXUS_DEPLOY_USER }}
          artifactory_password: ${{ env.NEXUS_DEPLOY_PASSWORD }}

      - name: Version set
        if: ${{ inputs.run_versioning == true }}
        run: |
          sed -i 's/BASE_VERSION/${{ env.BASE_VERSION || steps.get-latest-version.outputs.version }}/g' .github/release-versions.properties
          sed -i 's/BUILD_NBR/${{ github.run_number }}/g' .github/release-versions.properties
          
          java -DRELEASE_MODE=true -jar /version-merger.jar . \
            -f .github/release-versions.properties \
            commit project.revision=${{ steps.version.outputs.current-version }} \
            project.version=${{ steps.version.outputs.current-version }} \
            version=${{ steps.version.outputs.current-version }} \
            distribution.version=${{ steps.version.outputs.current-version }} \
            project.stage=master

      - name: Update cmd_type as per the mvn_directives
        if: env.SET_CMD_TYPE == null
        run: |
          if [[ -n "${{ inputs.additional_mvn_directives }}" && "${{ inputs.additional_mvn_directives }}" == *"-DrunITs"* ]]; then
            echo "SET_CMD_TYPE=BUILD,UNIT_TEST,INTEGRATION_TEST" >> $GITHUB_ENV
          else
            echo "SET_CMD_TYPE=BUILD,UNIT_TEST" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Build code, deploy artifacts & Run tests
        id: Build_Unit_Test
        uses: lumada-common-services/gh-composite-actions@stable
        with:
          command: |
            mvn clean deploy -B -Daudit \
              -Pcicd-release -Dbuild.name=${{ steps.post-setup.outputs.build_name }} -Dbuild.number=${{ steps.post-setup.outputs.build_number }} \
              -pl "${{ inputs.modules_to_build || steps.change_detection.outputs.changed_modules }}" \
              -amd ${{ inputs.additional_mvn_directives }}
        env:
          cmd_type: ${{ env.SET_CMD_TYPE }}
          unit_test_reporter: 'java-junit'
          unit_test_fail_on_error: 'true'
          unit_test_report_path: '**/target/surefire-reports/*.xml'
          int_test_reporter: 'java-junit'
          int_test_fail_on_error: 'true'
          int_test_report_path: '**/target/failsafe-reports/TEST*.xml'

      - name: Sonarqube scan
        id: Sonarqube
        if: ${{ inputs.run_snapshot == false }}
        continue-on-error: true
        uses: lumada-common-services/gh-composite-actions@stable
        env:
          sonar_utility: sonar-scanner
          sonar_commands: '("-Dsonar.working.directory=/tmp/.scannerwork -Dsonar.projectKey=${{env.SONAR_PROJECT_KEY}} -Dsonar.host.url=${{env.SONAR_HOST_URL}} -Dsonar.token=${{env.SONAR_LOGIN}}")'

      - name: Tag release
        uses: lumada-common-services/gh-composite-actions@stable
        env:
          Tag_version: "${{ steps.version.outputs.current-tag }}"
          push_tag_only: true

      - name: Create artifacts download links
        shell: bash
        run: |
          echo "[Full artifacts list](${{ env.ARTIFACTORY_HOST }}/ui/builds/${{ steps.post-setup.outputs.build_name }}/${{ steps.post-setup.outputs.build_number }})" >> $GITHUB_STEP_SUMMARY

      - name: Report notifications
        if: always()
        uses: lumada-common-services/gh-composite-actions@stable
        env:
          Slack_Token: ${{ secrets.SLACK_TOKEN }}
          Slack_Channel: ${{ env.SLACK_CHANNEL }}
          teams_Webhook_Url: ${{ secrets[inputs.ms_teams_webhook_secret_name] }}
          steps_json: ${{ toJson(steps) }}
          report: true
