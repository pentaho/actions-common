name: Pentaho Update Version workflow
on:
  workflow_call:
    inputs:
      container_image:
        type: string
        required: false
        description: "Image to be used"
      dry_run:
        type: boolean
        default: true
        description: "Dry run. No real changes should occur."

env:
  ARTIFACTORY_BASE_URL: https://${{ vars.ARTIFACTORY_HOST }}/artifactory

  RESOLVE_REPO_MIRROR: ${ARTIFACTORY_BASE_URL}/pnt-mvn
  NPM_REGISTRY: //${{ vars.ARTIFACTORY_HOST }}/artifactory/api/npm/npm/

  NEXUS_DEPLOY_USER: ${{ secrets.PENTAHO_CICD_ONE_USER }}
  NEXUS_DEPLOY_PASSWORD: ${{ secrets.PENTAHO_CICD_ONE_KEY }}

  PUBLIC_RELEASE_REPO: pntpub-maven-dev
  PUBLIC_RELEASE_REPO_URL: ${ARTIFACTORY_BASE_URL}/${PUBLIC_RELEASE_REPO}
  PRIVATE_RELEASE_REPO: pntprv-maven-dev
  PRIVATE_RELEASE_REPO_URL: ${ARTIFACTORY_BASE_URL}/${PRIVATE_RELEASE_REPO}

  PUBLIC_SNAPSHOT_REPO: pntpub-maven-snapshot
  PUBLIC_SNAPSHOT_REPO_URL: ${ARTIFACTORY_BASE_URL}/${PUBLIC_SNAPSHOT_REPO}
  PRIVATE_SNAPSHOT_REPO: pntprv-maven-snapshot
  PRIVATE_SNAPSHOT_REPO_URL: ${ARTIFACTORY_BASE_URL}/${PRIVATE_SNAPSHOT_REPO}

  DOCKER_PULL_HOST: ${{ vars.ARTIFACTORY_HOST }}/pnt-docker/
  DOCKER_PUBLIC_PUSH_HOST: ${{ vars.ARTIFACTORY_HOST }}/pntpub-docker-dev/
  DOCKER_PRIVATE_PUSH_HOST: ${{ vars.ARTIFACTORY_HOST }}/pntprv-docker-dev/

jobs:
  bump-version:
    runs-on: [ k8s ]
    container:
      image: ${{ inputs.container_image || vars.PDIA_AC_CONTAINER_IMAGE }}
      credentials:
        username: ${{ secrets.PENTAHO_CICD_ONE_USER }}
        password: ${{ secrets.PENTAHO_CICD_ONE_KEY }}
      volumes:
        - /home/runner/caches/pentaho/.m2:/root/.m2
    steps:
      - name: Retrieve settings file
        id: common-maven
        uses: pentaho/actions-common@stable

      - name: Copy settings.xml to .m2 directory
        shell: sh
        run: |
          cp "${{ steps.common-maven.outputs.settings-file-path }}" /root/.m2

      - name: Checkout source repo
        uses: actions/checkout@v4

      - name: Get current version
        id: get-version
        run: |
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $current_version"
          echo "current_version=$current_version" >> $GITHUB_OUTPUT

      - name: Increment patch version
        id: increment-version
        shell: bash
        run: |
          current_version=${{ steps.get-version.outputs.current_version }}

          # Remove the -SNAPSHOT suffix if present
          base_version=${current_version%-SNAPSHOT}

          # Split into array
          IFS='.' read -r -a parts <<< "$base_version"
          last_index=$((${#parts[@]} - 1))
          parts[$last_index]=$((parts[$last_index] + 1))

          # Reconstruct version, joining the parts by dots
          new_version=$(IFS='.'; echo "${parts[*]}")
          
          clean_new_version="$new_version"

          # Reattach the -SNAPSHOT suffix if it was present
          if [[ "$current_version" == *-SNAPSHOT ]]; then
            new_version="$new_version-SNAPSHOT"
          fi

          echo "New version: $new_version"
          echo "Clean new version: $clean_new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "clean_new_version=$clean_new_version" >> $GITHUB_OUTPUT

      - name: Update Maven version
        run: mvn versions:set -DnewVersion=${{ steps.increment-version.outputs.new_version }}

      - name: Configure Git
        uses: pentaho/actions-common/.github/actions/git-config@PAS

      - name: Detect npm
        id: detect-npm
        uses: pentaho/actions-common/.github/actions/detect-npm@PAS

      - name: NPM authentication
        if: ${{ steps.detect-npm.outputs.has_npm == 'true' }}
        uses: pentaho/actions-common/.github/actions/npm-registry-auth@PAS
        with:
          pentaho_registry: ${{ env.NPM_REGISTRY }}
          username: ${{ secrets.PENTAHO_CICD_ONE_USER }}
          password: ${{ secrets.PENTAHO_CICD_ONE_KEY }}

      - name: Install dependencies
        if: ${{ steps.detect-npm.outputs.has_npm == 'true' }}
        run: npm ci

      - name: Update NPM version
        if: ${{ steps.detect-npm.outputs.has_npm == 'true' }}
        run: |
          npm run --if-present version:set -- ${{ steps.increment-version.outputs.clean_new_version }}
          npm run --if-present version:print

      - name: Commit changes
        if: ${{ !inputs.dry_run }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Add all files matching patterns (git add ignores non-existent files with pathspecs)
          git add -- 'pom.xml' '**/pom.xml' 'package.json' '**/package.json' 'package-lock.json' '**/package-lock.json' 'lerna.json' || true

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update version to ${{ steps.increment-version.outputs.new_version }}"
            git push
          fi
