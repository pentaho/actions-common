name: Pentaho release workflow
on:
  workflow_call:
    inputs:
      release_version:
        description: ""
        required: true
        type: string
      dry_run:
        type: boolean
        default: true
        description: "Dry run. No real changes should occur."

env:
  ARTIFACTORY_HOST: https://${{ vars.ARTIFACTORY_HOST }}
  ARTIFACTORY_BASE_URL: ${ARTIFACTORY_HOST}/artifactory
  ARTIFACTORY_DEPLOY_USER: ${{ secrets.PENTAHO_CICD_ONE_USER }}
  ARTIFACTORY_DEPLOY_PASSWORD: ${{ secrets.PENTAHO_CICD_ONE_KEY }}

  NEXUS_DEPLOY_USER: ${{ secrets.PENTAHO_CICD_ONE_USER }}
  NEXUS_DEPLOY_PASSWORD: ${{ secrets.PENTAHO_CICD_ONE_KEY }}

jobs:

  pentaho-release:

    runs-on: [ k8s ]

    container:
      image: one.hitachivantara.com/devops-docker-release/pentaho/actions-common:20240305.137
      credentials:
        username: ${{ secrets.PENTAHO_CICD_ONE_USER }}
        password: ${{ secrets.PENTAHO_CICD_ONE_KEY }}

    steps:

      - name: Checkout source repo
        uses: actions/checkout@v4

      # expecting the release_version to be something like 9.5.1.0-23
      - name: Work the release version
        shell: bash
        run: |
          release_version="${{ inputs.release_version }}"
          version=$(echo "$release_version" | cut -d '-' -f1 | xargs)
          build_nbr=$(echo "$release_version" | cut -d '-' -f2 | xargs)
          
          build_name="${{ github.event.repository.name }}-${release_version}"
          
          if [ "$version" = "$build_nbr" ]; then
            build_aql="builds.find({\"name\": \"$build_name\"}).include(\"number\",\"created\").sort({\"\$desc\" : [\"created\"]}).limit(1)"
            buildinfo_data=$(curl -L -u "${{ env.NEXUS_DEPLOY_USER }}:${{ env.NEXUS_DEPLOY_PASSWORD }}" -X POST -H "Content-Type:text/plain" ${{ env.ARTIFACTORY_BASE_URL }}/api/search/aql -d "$build_aql")
            echo "$buildinfo_data"

            buildinfo_number=$(echo $buildinfo_data | jq -r '.results[0]."build.number"')

            if [[ "$buildinfo_number" != "" && "$buildinfo_number" != "null" ]]; then
              build_nbr="$buildinfo_number"  
            fi
          fi
          
          echo "BUILD_NAME=${build_name}" >> $GITHUB_ENV 
          echo "BUILD_NUMBER=${build_nbr}" >> $GITHUB_ENV 

      - name: Config Artifactory in jFrog CLI
        run: |
          jf config add artifactory --interactive=false --enc-password=false --basic-auth-only \
            --artifactory-url ${{ env.ARTIFACTORY_BASE_URL }} \
            --password ${{ env.ARTIFACTORY_DEPLOY_PASSWORD }} \
            --user ${{ env.ARTIFACTORY_DEPLOY_USER }}

      # Going to fetch repo metadata so that we can use REPOSITORY_IS_PRIVATE in the following step
      - name: Get Repository Metadata
        uses: varunsridharan/action-repository-meta@2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Promote artifacts
        run: |
          rt_repo='pntpub-maven-release'

          if [ "${{ env.REPOSITORY_IS_PRIVATE }}" = "true" ]; then
            rt_repo='pntprv-maven-release'
          fi

          promotion_summary=""
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            promotion_summary="[Dry run] "
          fi
          jf rt build-promote "${{ env.BUILD_NAME }}" "${{ env.BUILD_NUMBER }}" ${rt_repo} --dry-run=${{ inputs.dry_run }}
          
          echo "$promotion_summary :frog: Version ${{ inputs.release_version }} was promoted to [${rt_repo}](${{ env.ARTIFACTORY_BASE_URL }}/${rt_repo}) - [Build Info](${{ env.ARTIFACTORY_HOST }}/ui/builds/${{ env.BUILD_NAME }}/${{ env.BUILD_NUMBER }}/)" >> $GITHUB_STEP_SUMMARY 
