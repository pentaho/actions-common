# This is the compliance Merge action. IT takes care of all compliance requirements
# when merging code. There are certain secrets/variables that need to be set.
#
# secrets.HV_ACTIONS_GIT_TOKEN
#   This is the GH API key to use.
# inputs.scpId
#   This is the project entity ID in Threatrix where this scan must be added.
# secrets.THREATRIX_OID
#   This is the Threatrix Organisation ID
# secrets.THREATRIX_EID
#   This is the Threatrix Enterprise ID
# secrets.THREATRIX_SERVER_API_KEY
#   This is the Threatrix Server API Key
# secrets.PENTAHO_CICD_ONE_USER
#   The user for artifactory
# secrets.PENTAHO_CICD_ONE_KEY
#   The api key for artifactory
#
# To tnable the compliance checks in a given project, add the following action
# in the workflows:
#
################################################################################
# name: Pentaho Merge Compliance
# on:
#   workflow_dispatch:
#   push:
#     branches:
#       - "main"
#       - "master"
#       - "+([0-9])*(.+([0-9]))"
#     paths-ignore:
#       - .github/**
# jobs:
#   run-merge-compliance:
#     name: Run Merge Compliance Checks
#     uses: pentaho/actions-common/.github/workflows/merge_compliance.yml
#     scpId: [[Threatrix SCPID for your project]]
#     secrets: inherit
################################################################################
#
name: Pentaho Merge Compliance
on:
  workflow_call:
    inputs:
      arti_host:
        required: false
        type: string
        default: https://one.hitachivantara.com
        description: "Artifactory's Host name"
      additional_mvn_directives:
        required: false
        type: string
        description: "Extra additional directives for the Maven command"
        default: ""
      scpId:
        required: false
        type: string
        description: "Project Entity ID for Threatrix"
        default: ""
      originRepoOwner:
        required: false
        type: string
        description: "Repository organisation/owner where merge PRs are checked. This would typically be overridden with 'webdetails' where required."
        default: "pentaho"

env:

  ARTIFACTORY_HOST: ${{ inputs.arti_host }}
  ARTIFACTORY_BASE_URL: ${ARTIFACTORY_HOST}/artifactory

  RESOLVE_REPO_MIRROR: ${ARTIFACTORY_BASE_URL}/pnt-mvn

  NEXUS_DEPLOY_USER: ${{ secrets.PENTAHO_CICD_ONE_USER }}
  NEXUS_DEPLOY_PASSWORD: ${{ secrets.PENTAHO_CICD_ONE_KEY }}

  PUBLIC_RELEASE_REPO_URL: ${ARTIFACTORY_BASE_URL}/pntpub-maven-dev
  PRIVATE_RELEASE_REPO: pntprv-maven-dev
  PRIVATE_RELEASE_REPO_URL: ${ARTIFACTORY_BASE_URL}/${PRIVATE_RELEASE_REPO}

  PUBLIC_SNAPSHOT_REPO_URL: ${ARTIFACTORY_BASE_URL}/pntpub-maven-snapshot
  PRIVATE_SNAPSHOT_REPO: pntprv-maven-snapshot
  PRIVATE_SNAPSHOT_REPO_URL: ${ARTIFACTORY_BASE_URL}/${PRIVATE_SNAPSHOT_REPO}

  DOCKER_PULL_HOST: one.hitachivantara.com/docker/
  DOCKER_PUBLIC_PUSH_HOST: one.hitachivantara.com/pntpub-docker-dev/
  DOCKER_PRIVATE_PUSH_HOST: one.hitachivantara.com/pntprv-docker-dev/

jobs:

  setup-maven-settings:
    name: Setup Maven settings
    if: github.repository_owner == inputs.originRepoOwner
    runs-on: [ k8s ]

    container:
      image: one.hitachivantara.com/devops-docker-release/pentaho/actions-common:20240305.137
      credentials:
        username: ${{ secrets.PENTAHO_CICD_ONE_USER }}
        password: ${{ secrets.PENTAHO_CICD_ONE_KEY }}
      volumes:
        - /home/runner/caches/pentaho/.m2:/root/.m2

    steps:

      - name: Retrieve settings file
        id: common-maven
        uses: pentaho/actions-common@stable

      - name: Copy settings.xml to .m2 directory
        shell: sh
        run: |
          cp "${{ steps.common-maven.outputs.settings-file-path }}" /root/.m2

  threatrix:
    name: threatrix
    needs: setup-maven-settings
    runs-on: [ k8s ]

    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
      pull-requests: write

    container:
      image: one.hitachivantara.com/devops-docker-release/pentaho/actions-common:20240305.137
      credentials:
        username: ${{ secrets.PENTAHO_CICD_ONE_USER }}
        password: ${{ secrets.PENTAHO_CICD_ONE_KEY }}
      volumes:
        - /home/runner/caches/pentaho/.m2:/root/.m2

    steps:

      - name: Load Job metadata into Env vars
        shell: bash
        continue-on-error: true
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
        run: |
          process_json() {
            local prefix=$1
            local json_data=$2

            echo "$json_data" | jq -r 'to_entries | .[] | "\(.key) \(.value|tostring)"' | while read -r key value; do
              # Check if the value is a JSON object or array
              is_json=$(echo $value | jq -e . >/dev/null 2>&1 ; echo ${PIPESTATUS[1]})
              if [[ $is_json == 0 ]]; then
                # If it's an object or array, call the function recursively
                process_json "${prefix}${key}_" "$(echo "$json_data" | jq -c ."$key")"
              else
                echo "Creating \"${prefix}${key}\" env var with the value \"${value}\""
                echo "${prefix}${key}=${value}" >> $GITHUB_ENV
              fi
            done
          }
          # Start processing JSON from the root
          echo "Dealing with ${{ env.JOB_CONTEXT }}"
          process_json '' '${{ env.JOB_CONTEXT }}'

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update cmd_type as per the mvn_directives
        if: env.SET_CMD_TYPE == null
        run: |
          if [[ -n "${{ inputs.additional_mvn_directives }}" && "${{ inputs.additional_mvn_directives }}" == *"-DrunITs"* ]]; then
            echo "SET_CMD_TYPE=BUILD,UNIT_TEST,INTEGRATION_TEST" >> $GITHUB_ENV
          else
            echo "SET_CMD_TYPE=BUILD,UNIT_TEST" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Determine which changes occurred
        id: change_detection
        uses: hv-actions/change-detection-builder@stable

      - name: Build & Run tests
        uses: lumada-common-services/gh-composite-actions@stable
        with:
          command: |
            mvn clean verify -DskipTests=true -Daudit -amd \
            -pl "${{ steps.change_detection.outputs.changed_modules }}" \
            ${{ inputs.additional_mvn_directives }}
        env:
          cmd_type: ${{ env.SET_CMD_TYPE }}
          unit_test_reporter: 'java-junit'
          unit_test_fail_on_error: 'true'
          unit_test_report_path: '**/target/surefire-reports/*.xml'
          int_test_reporter: 'java-junit'
          int_test_fail_on_error: 'true'
          int_test_report_path: '**/target/failsafe-reports/TEST*.xml'

      # This is the threatrix invocation.
      - run: |
           curl -LJO https://github.com/threatrix/threat-matrix/releases/download/agent-release-latest/threat-agent-latest.jar
           java -jar threat-agent-latest.jar --verbose --progress --app-name=${{ github.event.repository.name }} --tags="agent, repo/folder, merge, ${{ github.head_ref || github.ref_name }}" --branch=${{ github.head_ref || github.ref_name }} --scm=GITHUB --scm-auth-token=${{ secrets.HV_ACTIONS_GIT_TOKEN }} --repo-owner=${{ github.repository_owner }} --repo-name=${{ github.event.repository.name }} --scpId=${{ inputs.scpId || 'UNDEFINED' }} --oid=${{ vars.THREATRIX_OID }} --eid=${{ vars.THREATRIX_EID }} --api-key=${{ secrets.THREATRIX_SERVER_API_KEY }} .
